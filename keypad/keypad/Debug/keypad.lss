
keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000454  000004c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000454  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000508  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d1c  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000092d  00000000  00000000  000012c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000749  00000000  00000000  00001bf1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  0000233c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ef  00000000  00000000  000023d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000614  00000000  00000000  000028c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002ed7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e5       	ldi	r30, 0x54	; 84
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	cd c1       	rjmp	.+922    	; 0x450 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:
#include "util/delay.h"
#include "utility.h"


int main(void)
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	60 97       	sbiw	r28, 0x10	; 16
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
	unsigned char butn;
	unsigned char malik[4][4] = 
  cc:	80 e1       	ldi	r24, 0x10	; 16
  ce:	e0 e0       	ldi	r30, 0x00	; 0
  d0:	f1 e0       	ldi	r31, 0x01	; 1
  d2:	de 01       	movw	r26, r28
  d4:	11 96       	adiw	r26, 0x01	; 1
  d6:	01 90       	ld	r0, Z+
  d8:	0d 92       	st	X+, r0
  da:	8a 95       	dec	r24
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x1e>
		{0x66, 0x6D, 0x7D, 0x7C},
		{0x07, 0x7F, 0x6F, 0x39},
		{0x1B, 0x3F, 0x76, 0x5E},
	};
	
	for (int i=4; i<8;i++) //output
  de:	24 e0       	ldi	r18, 0x04	; 4
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	12 c0       	rjmp	.+36     	; 0x108 <main+0x50>
	{
		DDRC |= (1 << i);
  e4:	44 b3       	in	r20, 0x14	; 20
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	02 2e       	mov	r0, r18
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <main+0x3a>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	0a 94       	dec	r0
  f4:	e2 f7       	brpl	.-8      	; 0xee <main+0x36>
  f6:	94 2f       	mov	r25, r20
  f8:	98 2b       	or	r25, r24
  fa:	94 bb       	out	0x14, r25	; 20
		PORTC &= ~(1 << i);
  fc:	95 b3       	in	r25, 0x15	; 21
  fe:	80 95       	com	r24
 100:	89 23       	and	r24, r25
 102:	85 bb       	out	0x15, r24	; 21
		{0x66, 0x6D, 0x7D, 0x7C},
		{0x07, 0x7F, 0x6F, 0x39},
		{0x1B, 0x3F, 0x76, 0x5E},
	};
	
	for (int i=4; i<8;i++) //output
 104:	2f 5f       	subi	r18, 0xFF	; 255
 106:	3f 4f       	sbci	r19, 0xFF	; 255
 108:	28 30       	cpi	r18, 0x08	; 8
 10a:	31 05       	cpc	r19, r1
 10c:	5c f3       	brlt	.-42     	; 0xe4 <main+0x2c>
 10e:	20 e0       	ldi	r18, 0x00	; 0
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	12 c0       	rjmp	.+36     	; 0x138 <main+0x80>
		DDRC |= (1 << i);
		PORTC &= ~(1 << i);
	}
	for (int j=0; j<4;j++) //input
	{
		DDRC &= ~(1 << j);
 114:	44 b3       	in	r20, 0x14	; 20
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 2e       	mov	r0, r18
 11c:	02 c0       	rjmp	.+4      	; 0x122 <main+0x6a>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	0a 94       	dec	r0
 124:	e2 f7       	brpl	.-8      	; 0x11e <main+0x66>
 126:	98 2f       	mov	r25, r24
 128:	90 95       	com	r25
 12a:	94 23       	and	r25, r20
 12c:	94 bb       	out	0x14, r25	; 20
		PORTC |= (1 << j);
 12e:	95 b3       	in	r25, 0x15	; 21
 130:	89 2b       	or	r24, r25
 132:	85 bb       	out	0x15, r24	; 21
	for (int i=4; i<8;i++) //output
	{
		DDRC |= (1 << i);
		PORTC &= ~(1 << i);
	}
	for (int j=0; j<4;j++) //input
 134:	2f 5f       	subi	r18, 0xFF	; 255
 136:	3f 4f       	sbci	r19, 0xFF	; 255
 138:	24 30       	cpi	r18, 0x04	; 4
 13a:	31 05       	cpc	r19, r1
 13c:	5c f3       	brlt	.-42     	; 0x114 <main+0x5c>
	{
		DDRC &= ~(1 << j);
		PORTC |= (1 << j);
	}
    DDRA = 0xFF;
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	8a bb       	out	0x1a, r24	; 26
	
    while (1) 
    {
		
		
	if(gpio_read_pin(PORTC_ID, 0) == 1 && gpio_read_pin(PORTC_ID, 1) ==1 && gpio_read_pin(PORTC_ID, 2) == 1 && gpio_read_pin(PORTC_ID, 3) == 1){
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	f9 d0       	rcall	.+498    	; 0x33a <gpio_read_pin>
 148:	81 30       	cpi	r24, 0x01	; 1
 14a:	89 f4       	brne	.+34     	; 0x16e <main+0xb6>
 14c:	61 e0       	ldi	r22, 0x01	; 1
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	f4 d0       	rcall	.+488    	; 0x33a <gpio_read_pin>
 152:	81 30       	cpi	r24, 0x01	; 1
 154:	61 f4       	brne	.+24     	; 0x16e <main+0xb6>
 156:	62 e0       	ldi	r22, 0x02	; 2
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	ef d0       	rcall	.+478    	; 0x33a <gpio_read_pin>
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	39 f4       	brne	.+14     	; 0x16e <main+0xb6>
 160:	63 e0       	ldi	r22, 0x03	; 3
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	ea d0       	rcall	.+468    	; 0x33a <gpio_read_pin>
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	11 f4       	brne	.+4      	; 0x16e <main+0xb6>
 16a:	1b ba       	out	0x1b, r1	; 27
		PORTA = 0x00;
 16c:	ea cf       	rjmp	.-44     	; 0x142 <main+0x8a>
 16e:	20 e0       	ldi	r18, 0x00	; 0
	}
	else 
	{
		for (int j=0; j<4;j++) // read status of colums pins
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	0c c0       	rjmp	.+24     	; 0x18c <main+0xd4>
 174:	83 b3       	in	r24, 0x13	; 19
	{
		
	if ((PINC & (1 << j ))==0)
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	02 2e       	mov	r0, r18
 17a:	02 c0       	rjmp	.+4      	; 0x180 <main+0xc8>
 17c:	95 95       	asr	r25
 17e:	87 95       	ror	r24
 180:	0a 94       	dec	r0
 182:	e2 f7       	brpl	.-8      	; 0x17c <main+0xc4>
 184:	80 ff       	sbrs	r24, 0
 186:	12 2f       	mov	r17, r18
	           {
		butn = j;
 188:	2f 5f       	subi	r18, 0xFF	; 255
	if(gpio_read_pin(PORTC_ID, 0) == 1 && gpio_read_pin(PORTC_ID, 1) ==1 && gpio_read_pin(PORTC_ID, 2) == 1 && gpio_read_pin(PORTC_ID, 3) == 1){
		PORTA = 0x00;
	}
	else 
	{
		for (int j=0; j<4;j++) // read status of colums pins
 18a:	3f 4f       	sbci	r19, 0xFF	; 255
 18c:	24 30       	cpi	r18, 0x04	; 4
 18e:	31 05       	cpc	r19, r1
 190:	8c f3       	brlt	.-30     	; 0x174 <main+0xbc>
 192:	85 b3       	in	r24, 0x15	; 21
	if ((PINC & (1 << j ))==0)
	           {
		butn = j;
	           }	
	}	 
	PORTC &= ~(1 << 4);
 194:	8f 7e       	andi	r24, 0xEF	; 239
 196:	85 bb       	out	0x15, r24	; 21
 198:	85 b3       	in	r24, 0x15	; 21
	PORTC |= (1 << 5);
 19a:	80 62       	ori	r24, 0x20	; 32
 19c:	85 bb       	out	0x15, r24	; 21
 19e:	85 b3       	in	r24, 0x15	; 21
	PORTC |= (1 << 6);
 1a0:	80 64       	ori	r24, 0x40	; 64
 1a2:	85 bb       	out	0x15, r24	; 21
 1a4:	85 b3       	in	r24, 0x15	; 21
	PORTC |= (1 << 7);
 1a6:	80 68       	ori	r24, 0x80	; 128
 1a8:	85 bb       	out	0x15, r24	; 21
	if ((gpio_read_pin(PORTC_ID,butn))==1)
 1aa:	61 2f       	mov	r22, r17
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	c5 d0       	rcall	.+394    	; 0x33a <gpio_read_pin>
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	09 f0       	breq	.+2      	; 0x1b6 <main+0xfe>
 1b4:	9f c0       	rjmp	.+318    	; 0x2f4 <main+0x23c>
 1b6:	85 b3       	in	r24, 0x15	; 21
	{
		PORTC |= (1 << 4);
 1b8:	80 61       	ori	r24, 0x10	; 16
 1ba:	85 bb       	out	0x15, r24	; 21
 1bc:	85 b3       	in	r24, 0x15	; 21
		PORTC &= ~(1 << 5);
 1be:	8f 7d       	andi	r24, 0xDF	; 223
 1c0:	85 bb       	out	0x15, r24	; 21
 1c2:	85 b3       	in	r24, 0x15	; 21
		PORTC |= (1 << 6);
 1c4:	80 64       	ori	r24, 0x40	; 64
 1c6:	85 bb       	out	0x15, r24	; 21
 1c8:	85 b3       	in	r24, 0x15	; 21
		PORTC |= (1 << 7);
 1ca:	80 68       	ori	r24, 0x80	; 128
 1cc:	85 bb       	out	0x15, r24	; 21
		if ((gpio_read_pin(PORTC_ID,butn))==1)
 1ce:	61 2f       	mov	r22, r17
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	b3 d0       	rcall	.+358    	; 0x33a <gpio_read_pin>
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	09 f0       	breq	.+2      	; 0x1da <main+0x122>
 1d8:	6a c0       	rjmp	.+212    	; 0x2ae <main+0x1f6>
 1da:	85 b3       	in	r24, 0x15	; 21
		{
			PORTC |= (1 << 4);
 1dc:	80 61       	ori	r24, 0x10	; 16
 1de:	85 bb       	out	0x15, r24	; 21
 1e0:	85 b3       	in	r24, 0x15	; 21
			PORTC |= (1 << 5);
 1e2:	80 62       	ori	r24, 0x20	; 32
 1e4:	85 bb       	out	0x15, r24	; 21
 1e6:	85 b3       	in	r24, 0x15	; 21
			PORTC &= ~(1 << 6);
 1e8:	8f 7b       	andi	r24, 0xBF	; 191
 1ea:	85 bb       	out	0x15, r24	; 21
			PORTC |= (1 << 7);
 1ec:	85 b3       	in	r24, 0x15	; 21
 1ee:	80 68       	ori	r24, 0x80	; 128
 1f0:	85 bb       	out	0x15, r24	; 21
			if ((gpio_read_pin(PORTC_ID,butn))==1)
 1f2:	61 2f       	mov	r22, r17
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	a1 d0       	rcall	.+322    	; 0x33a <gpio_read_pin>
 1f8:	81 30       	cpi	r24, 0x01	; 1
 1fa:	b1 f5       	brne	.+108    	; 0x268 <main+0x1b0>
 1fc:	85 b3       	in	r24, 0x15	; 21
			{
				PORTC |= (1 << 4);
 1fe:	80 61       	ori	r24, 0x10	; 16
 200:	85 bb       	out	0x15, r24	; 21
 202:	85 b3       	in	r24, 0x15	; 21
				PORTC |= (1 << 5);
 204:	80 62       	ori	r24, 0x20	; 32
 206:	85 bb       	out	0x15, r24	; 21
 208:	85 b3       	in	r24, 0x15	; 21
				PORTC |= (1 << 6);
 20a:	80 64       	ori	r24, 0x40	; 64
 20c:	85 bb       	out	0x15, r24	; 21
				PORTC &= ~(1 << 7);
 20e:	85 b3       	in	r24, 0x15	; 21
 210:	8f 77       	andi	r24, 0x7F	; 127
 212:	85 bb       	out	0x15, r24	; 21
				if ((gpio_read_pin(PORTC_ID,butn))==1)
 214:	61 2f       	mov	r22, r17
 216:	82 e0       	ldi	r24, 0x02	; 2
 218:	90 d0       	rcall	.+288    	; 0x33a <gpio_read_pin>
 21a:	81 30       	cpi	r24, 0x01	; 1
 21c:	11 f4       	brne	.+4      	; 0x222 <main+0x16a>
 21e:	1b ba       	out	0x1b, r1	; 27
				{
					PORTA = 0x00;
 220:	90 cf       	rjmp	.-224    	; 0x142 <main+0x8a>
 222:	e1 e0       	ldi	r30, 0x01	; 1
				}
				else {
					PORTA = malik[0][butn];
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	ec 0f       	add	r30, r28
 228:	fd 1f       	adc	r31, r29
 22a:	e1 0f       	add	r30, r17
 22c:	f1 1d       	adc	r31, r1
 22e:	80 81       	ld	r24, Z
 230:	8b bb       	out	0x1b, r24	; 27
 232:	83 ec       	ldi	r24, 0xC3	; 195
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 234:	99 e0       	ldi	r25, 0x09	; 9
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <main+0x17e>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <main+0x184>
 23c:	00 00       	nop
 23e:	24 e0       	ldi	r18, 0x04	; 4
					_delay_ms(10);
					for (int i =4; i<8;i++)
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	0e c0       	rjmp	.+28     	; 0x260 <main+0x1a8>
 244:	45 b3       	in	r20, 0x15	; 21
					{
						PORTC &= ~(1 << i);
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	02 2e       	mov	r0, r18
 24c:	02 c0       	rjmp	.+4      	; 0x252 <main+0x19a>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	0a 94       	dec	r0
 254:	e2 f7       	brpl	.-8      	; 0x24e <main+0x196>
 256:	80 95       	com	r24
 258:	84 23       	and	r24, r20
 25a:	85 bb       	out	0x15, r24	; 21
 25c:	2f 5f       	subi	r18, 0xFF	; 255
					PORTA = 0x00;
				}
				else {
					PORTA = malik[0][butn];
					_delay_ms(10);
					for (int i =4; i<8;i++)
 25e:	3f 4f       	sbci	r19, 0xFF	; 255
 260:	28 30       	cpi	r18, 0x08	; 8
 262:	31 05       	cpc	r19, r1
 264:	7c f3       	brlt	.-34     	; 0x244 <main+0x18c>
 266:	6d cf       	rjmp	.-294    	; 0x142 <main+0x8a>
 268:	e5 e0       	ldi	r30, 0x05	; 5
					
				}
				
			}
			else {
				PORTA = malik[1][butn];
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	ec 0f       	add	r30, r28
 26e:	fd 1f       	adc	r31, r29
 270:	e1 0f       	add	r30, r17
 272:	f1 1d       	adc	r31, r1
 274:	80 81       	ld	r24, Z
 276:	8b bb       	out	0x1b, r24	; 27
 278:	83 ec       	ldi	r24, 0xC3	; 195
 27a:	99 e0       	ldi	r25, 0x09	; 9
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <main+0x1c4>
 280:	00 c0       	rjmp	.+0      	; 0x282 <main+0x1ca>
 282:	00 00       	nop
 284:	24 e0       	ldi	r18, 0x04	; 4
				_delay_ms(10);
				for (int i =4; i<8;i++)
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	0e c0       	rjmp	.+28     	; 0x2a6 <main+0x1ee>
 28a:	45 b3       	in	r20, 0x15	; 21
				{
					PORTC &= ~(1 << i);
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	02 2e       	mov	r0, r18
 292:	02 c0       	rjmp	.+4      	; 0x298 <main+0x1e0>
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	0a 94       	dec	r0
 29a:	e2 f7       	brpl	.-8      	; 0x294 <main+0x1dc>
 29c:	80 95       	com	r24
 29e:	84 23       	and	r24, r20
 2a0:	85 bb       	out	0x15, r24	; 21
 2a2:	2f 5f       	subi	r18, 0xFF	; 255
				
			}
			else {
				PORTA = malik[1][butn];
				_delay_ms(10);
				for (int i =4; i<8;i++)
 2a4:	3f 4f       	sbci	r19, 0xFF	; 255
 2a6:	28 30       	cpi	r18, 0x08	; 8
 2a8:	31 05       	cpc	r19, r1
 2aa:	7c f3       	brlt	.-34     	; 0x28a <main+0x1d2>
 2ac:	4a cf       	rjmp	.-364    	; 0x142 <main+0x8a>
 2ae:	e9 e0       	ldi	r30, 0x09	; 9
				}
				
			}
		}
		else {
			PORTA = malik[2][butn];
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	ec 0f       	add	r30, r28
 2b4:	fd 1f       	adc	r31, r29
 2b6:	e1 0f       	add	r30, r17
 2b8:	f1 1d       	adc	r31, r1
 2ba:	80 81       	ld	r24, Z
 2bc:	8b bb       	out	0x1b, r24	; 27
 2be:	83 ec       	ldi	r24, 0xC3	; 195
 2c0:	99 e0       	ldi	r25, 0x09	; 9
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <main+0x20a>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <main+0x210>
 2c8:	00 00       	nop
 2ca:	24 e0       	ldi	r18, 0x04	; 4
			_delay_ms(10);
		for (int i =4; i<8;i++)
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	0e c0       	rjmp	.+28     	; 0x2ec <main+0x234>
 2d0:	45 b3       	in	r20, 0x15	; 21
		{
			PORTC &= ~(1 << i);
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	02 2e       	mov	r0, r18
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <main+0x226>
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	0a 94       	dec	r0
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <main+0x222>
 2e2:	80 95       	com	r24
 2e4:	84 23       	and	r24, r20
 2e6:	85 bb       	out	0x15, r24	; 21
 2e8:	2f 5f       	subi	r18, 0xFF	; 255
			}
		}
		else {
			PORTA = malik[2][butn];
			_delay_ms(10);
		for (int i =4; i<8;i++)
 2ea:	3f 4f       	sbci	r19, 0xFF	; 255
 2ec:	28 30       	cpi	r18, 0x08	; 8
 2ee:	31 05       	cpc	r19, r1
 2f0:	7c f3       	brlt	.-34     	; 0x2d0 <main+0x218>
 2f2:	27 cf       	rjmp	.-434    	; 0x142 <main+0x8a>
 2f4:	ed e0       	ldi	r30, 0x0D	; 13
		}
			
		}
	}
	else {
		PORTA = malik[3][butn];
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	ec 0f       	add	r30, r28
 2fa:	fd 1f       	adc	r31, r29
 2fc:	e1 0f       	add	r30, r17
 2fe:	f1 1d       	adc	r31, r1
 300:	80 81       	ld	r24, Z
 302:	8b bb       	out	0x1b, r24	; 27
 304:	83 ec       	ldi	r24, 0xC3	; 195
 306:	99 e0       	ldi	r25, 0x09	; 9
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <main+0x250>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <main+0x256>
 30e:	00 00       	nop
 310:	24 e0       	ldi	r18, 0x04	; 4
		_delay_ms(10);
	for (int i =4; i<8;i++)
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	0e c0       	rjmp	.+28     	; 0x332 <main+0x27a>
 316:	45 b3       	in	r20, 0x15	; 21
	{
		PORTC &= ~(1 << i);
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	02 2e       	mov	r0, r18
 31e:	02 c0       	rjmp	.+4      	; 0x324 <main+0x26c>
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	0a 94       	dec	r0
 326:	e2 f7       	brpl	.-8      	; 0x320 <main+0x268>
 328:	80 95       	com	r24
 32a:	84 23       	and	r24, r20
 32c:	85 bb       	out	0x15, r24	; 21
 32e:	2f 5f       	subi	r18, 0xFF	; 255
		}
	}
	else {
		PORTA = malik[3][butn];
		_delay_ms(10);
	for (int i =4; i<8;i++)
 330:	3f 4f       	sbci	r19, 0xFF	; 255
 332:	28 30       	cpi	r18, 0x08	; 8
 334:	31 05       	cpc	r19, r1
 336:	7c f3       	brlt	.-34     	; 0x316 <main+0x25e>
 338:	04 cf       	rjmp	.-504    	; 0x142 <main+0x8a>

0000033a <gpio_read_pin>:
 33a:	82 30       	cpi	r24, 0x02	; 2
	}
}

// Read the state of the specified pin of the given port
uint8_t gpio_read_pin(PORT_ID port, uint8_t pin) {
	switch(port) {
 33c:	b9 f1       	breq	.+110    	; 0x3ac <gpio_read_pin+0x72>
 33e:	28 f4       	brcc	.+10     	; 0x34a <gpio_read_pin+0x10>
 340:	88 23       	and	r24, r24
 342:	61 f0       	breq	.+24     	; 0x35c <gpio_read_pin+0x22>
 344:	81 30       	cpi	r24, 0x01	; 1
 346:	f1 f0       	breq	.+60     	; 0x384 <gpio_read_pin+0x4a>
 348:	81 c0       	rjmp	.+258    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 34a:	84 30       	cpi	r24, 0x04	; 4
 34c:	09 f4       	brne	.+2      	; 0x350 <gpio_read_pin+0x16>
 34e:	56 c0       	rjmp	.+172    	; 0x3fc <gpio_read_pin+0xc2>
 350:	08 f4       	brcc	.+2      	; 0x354 <gpio_read_pin+0x1a>
 352:	40 c0       	rjmp	.+128    	; 0x3d4 <gpio_read_pin+0x9a>
 354:	85 30       	cpi	r24, 0x05	; 5
 356:	09 f4       	brne	.+2      	; 0x35a <gpio_read_pin+0x20>
 358:	65 c0       	rjmp	.+202    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 35a:	78 c0       	rjmp	.+240    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		case PORTA_ID:
		return READ_BIT(PINA, pin);  // Read the pin of PORTA
 35c:	49 b3       	in	r20, 0x19	; 25
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	9c 01       	movw	r18, r24
 364:	06 2e       	mov	r0, r22
 366:	02 c0       	rjmp	.+4      	; 0x36c <gpio_read_pin+0x32>
 368:	22 0f       	add	r18, r18
 36a:	33 1f       	adc	r19, r19
 36c:	0a 94       	dec	r0
 36e:	e2 f7       	brpl	.-8      	; 0x368 <gpio_read_pin+0x2e>
 370:	84 2f       	mov	r24, r20
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	82 23       	and	r24, r18
 376:	93 23       	and	r25, r19
 378:	02 c0       	rjmp	.+4      	; 0x37e <gpio_read_pin+0x44>
 37a:	95 95       	asr	r25
 37c:	87 95       	ror	r24
 37e:	6a 95       	dec	r22
 380:	e2 f7       	brpl	.-8      	; 0x37a <gpio_read_pin+0x40>
 382:	08 95       	ret
		case PORTB_ID:
		return READ_BIT(PINB, pin);  // Read the pin of PORTB
 384:	46 b3       	in	r20, 0x16	; 22
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	9c 01       	movw	r18, r24
 38c:	06 2e       	mov	r0, r22
 38e:	02 c0       	rjmp	.+4      	; 0x394 <gpio_read_pin+0x5a>
 390:	22 0f       	add	r18, r18
 392:	33 1f       	adc	r19, r19
 394:	0a 94       	dec	r0
 396:	e2 f7       	brpl	.-8      	; 0x390 <gpio_read_pin+0x56>
 398:	84 2f       	mov	r24, r20
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	82 23       	and	r24, r18
 39e:	93 23       	and	r25, r19
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <gpio_read_pin+0x6c>
 3a2:	95 95       	asr	r25
 3a4:	87 95       	ror	r24
 3a6:	6a 95       	dec	r22
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <gpio_read_pin+0x68>
 3aa:	08 95       	ret
		case PORTC_ID:
		return READ_BIT(PINC, pin);  // Read the pin of PORTC
 3ac:	43 b3       	in	r20, 0x13	; 19
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	9c 01       	movw	r18, r24
 3b4:	06 2e       	mov	r0, r22
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <gpio_read_pin+0x82>
 3b8:	22 0f       	add	r18, r18
 3ba:	33 1f       	adc	r19, r19
 3bc:	0a 94       	dec	r0
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <gpio_read_pin+0x7e>
 3c0:	84 2f       	mov	r24, r20
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	82 23       	and	r24, r18
 3c6:	93 23       	and	r25, r19
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <gpio_read_pin+0x94>
 3ca:	95 95       	asr	r25
 3cc:	87 95       	ror	r24
 3ce:	6a 95       	dec	r22
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <gpio_read_pin+0x90>
 3d2:	08 95       	ret
		case PORTD_ID:
		return READ_BIT(PIND, pin);  // Read the pin of PORTD
 3d4:	40 b3       	in	r20, 0x10	; 16
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	9c 01       	movw	r18, r24
 3dc:	06 2e       	mov	r0, r22
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <gpio_read_pin+0xaa>
 3e0:	22 0f       	add	r18, r18
 3e2:	33 1f       	adc	r19, r19
 3e4:	0a 94       	dec	r0
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <gpio_read_pin+0xa6>
 3e8:	84 2f       	mov	r24, r20
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	82 23       	and	r24, r18
 3ee:	93 23       	and	r25, r19
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <gpio_read_pin+0xbc>
 3f2:	95 95       	asr	r25
 3f4:	87 95       	ror	r24
 3f6:	6a 95       	dec	r22
 3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <gpio_read_pin+0xb8>
 3fa:	08 95       	ret
		case PORTE_ID:
		return READ_BIT(PINE, pin);  // Read the pin of PORTE
 3fc:	41 b1       	in	r20, 0x01	; 1
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	9c 01       	movw	r18, r24
 404:	06 2e       	mov	r0, r22
 406:	02 c0       	rjmp	.+4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 408:	22 0f       	add	r18, r18
 40a:	33 1f       	adc	r19, r19
 40c:	0a 94       	dec	r0
 40e:	e2 f7       	brpl	.-8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 410:	84 2f       	mov	r24, r20
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	82 23       	and	r24, r18
 416:	93 23       	and	r25, r19
 418:	02 c0       	rjmp	.+4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41a:	95 95       	asr	r25
 41c:	87 95       	ror	r24
 41e:	6a 95       	dec	r22
 420:	e2 f7       	brpl	.-8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 422:	08 95       	ret
		case PORTF_ID:
		return READ_BIT(PINF, pin);  // Read the pin of PORTF
 424:	40 b1       	in	r20, 0x00	; 0
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	9c 01       	movw	r18, r24
 42c:	06 2e       	mov	r0, r22
 42e:	02 c0       	rjmp	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 430:	22 0f       	add	r18, r18
 432:	33 1f       	adc	r19, r19
 434:	0a 94       	dec	r0
 436:	e2 f7       	brpl	.-8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 438:	84 2f       	mov	r24, r20
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	82 23       	and	r24, r18
 43e:	93 23       	and	r25, r19
 440:	02 c0       	rjmp	.+4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 442:	95 95       	asr	r25
 444:	87 95       	ror	r24
 446:	6a 95       	dec	r22
 448:	e2 f7       	brpl	.-8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 44a:	08 95       	ret
		default:
		return ERROR;  // Return 0xEE for invalid port
 44c:	8e ee       	ldi	r24, 0xEE	; 238
	}
}
 44e:	08 95       	ret

00000450 <_exit>:
 450:	f8 94       	cli

00000452 <__stop_program>:
 452:	ff cf       	rjmp	.-2      	; 0x452 <__stop_program>
